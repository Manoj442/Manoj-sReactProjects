{"version":3,"sources":["Cards/cards.module.css","API/index.js","Cards/Cards.js","Countries/Countries.js","Charts/Charts.js","App.js","serviceWorker.js","index.js","Countries/Countries.module.css","Charts/charts.module.css"],"names":["module","exports","url","fetchDate","country","a","changeableUrl","axios","get","data","confirmed","deaths","recovered","lastUpdate","modifiedData","console","log","fetchCountries","countryUrl","countries","map","name","fetchDailyData","dailyDataUrl","dailyData","d","total","date","reportDate","Cards","this","props","Object","keys","Typography","className","styles","titleDisplayer","variant","Grid","container","spacing","justify","index","key","item","component","Card","active","dontShow","CardContent","start","end","duration","separator","Date","toDateString","Component","Country","state","setState","FormControl","countryDropdown","NativeSelect","onChange","e","changeCountry","target","value","Chart","pieData","LineChart","length","labels","datasets","label","backgroundColor","fill","pieChart","options","legend","display","title","text","chartDimension","App","handleCountryChange","card","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.53097729.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"cards_active__OLRfj\",\"deaths\":\"cards_deaths__2Lh-j\",\"recovered\":\"cards_recovered__3dWxk\",\"dontShow\":\"cards_dontShow__39ZaU\",\"titleDisplayer\":\"cards_titleDisplayer__9RubA\"};","import axios from 'axios';\r\nconst url='https://covid19.mathdro.id/api';\r\n\r\nexport const fetchDate=async(country)=>{\r\n    let changeableUrl=url;\r\n    if(country){\r\n        changeableUrl=`${url}/countries/${country}`;\r\n    }\r\n    try{\r\n        const {data:{confirmed,deaths,recovered,lastUpdate}}=await axios.get(changeableUrl);\r\n        //console.log(data);\r\n        const modifiedData={\r\n            confirmed,\r\n            deaths,\r\n            recovered,lastUpdate\r\n        }\r\n        console.log(modifiedData)\r\n        return modifiedData;\r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries=async()=>{\r\n    const countryUrl=`${url}/countries`;\r\n const {data:{countries}}=await axios.get(countryUrl);\r\n return countries.map((country)=>country.name);\r\n //console.log(countries);\r\n}\r\nexport const fetchDailyData=async()=>{\r\n    const dailyDataUrl=`${url}/daily`;\r\n const dailyData=await axios.get(dailyDataUrl);\r\n console.log(dailyData);\r\n return dailyData.data.map((d)=>({\r\n     confirmed:d.confirmed.total,\r\n    deaths:d.deaths.total,\r\n    date:d.reportDate}));\r\n}\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport {Grid,Typography,Card,CardContent} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport styles from './../Cards/cards.module.css'\r\n//import Typography from '@material-ui/core/Typography';\r\nclass Cards extends Component{\r\n  // constructor(props){\r\n  //   super(props);\r\n  //  //console.log(props);\r\n  // }\r\n    render(){\r\n      //console.log(this.props.data);\r\n      const data=this.props.data;\r\n      //const card=({data:{}})\r\n      console.log(this.props.data.confirmed);\r\n      console.log(Object.keys(data))\r\n        return <div>\r\n          <Typography className={styles.titleDisplayer} variant=\"h3\">\r\n        COVID-19 TRACKER\r\n      </Typography><br/>\r\n         <Grid container spacing={4} justify=\"center\"> \r\n         {Object.keys(data).map((d,index)=>(         \r\n      <Grid key={index} item component={Card} \r\n      className={d === 'confirmed'? styles.active: \r\n      d=== 'deaths' ? styles.deaths:\r\n      d === 'recovered'?styles.recovered:\r\n      styles.dontShow}>\r\n        <CardContent>\r\n        <Typography variant=\"h6\">\r\n        {d === 'confirmed' ? 'Confirmed':d ==='deaths' ?'Deaths' : 'Recovered'} :  \r\n        &nbsp;<CountUp start={0} end={data[`${d}`][\"value\"]} duration = {2.5} separator=\",\"/>\r\n      </Typography>      \r\n      <Typography variant=\"subtitle1\">\r\n        Last update :  &nbsp;{new Date(data.lastUpdate).toDateString()}\r\n      </Typography> \r\n      <Typography variant=\"subtitle2\">\r\n        {d === 'confirmed' ? \"Total No of Active Cases\" :d === 'deaths'? \"Total No Of Deaths\":\"Total No Of Recovered\"}        \r\n      </Typography>          \r\n        </CardContent>      \r\n      </Grid>))}\r\n  </Grid>           \r\n        </div>\r\n    }\r\n}\r\nexport default Cards;","import React, {Component} from 'react';\r\nimport {FormControl, NativeSelect, Typography} from '@material-ui/core';\r\nimport {fetchCountries} from './../API/index';\r\nimport styles from './../Countries/Countries.module.css';\r\n//import {axios} from 'axios';\r\nclass Country extends Component{  \r\nconstructor(){\r\n    super();\r\n    this.state={\r\n        countries:[]\r\n    }\r\n}\r\n async componentDidMount(){\r\n  const countries= await fetchCountries();\r\n  console.log(countries);\r\n  this.setState({countries})\r\n }\r\n    render(){\r\n        return(\r\n            <FormControl className={styles.countryDropdown}>\r\n                <Typography variant=\"h6\" component=\"h2\">\r\n                Select a Country:\r\n                </Typography>\r\n                <NativeSelect onChange={(e)=>this.props.changeCountry(e.target.value)}>\r\n                    <option value=\"\">Global</option>\r\n                    {this.state.countries.map((country,index)=>{\r\n                        return <option key={index} value={country}>{country}</option>\r\n                    })}\r\n                </NativeSelect>\r\n            </FormControl>)\r\n}\r\n}\r\nexport default Country;","import React, {Component} from 'react';\r\nimport {Line,Pie} from 'react-chartjs-2';\r\nimport {fetchDailyData} from './../API/index';\r\nimport styles from './../Charts/charts.module.css';\r\nclass Chart extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            data:[]\r\n        }\r\n    }\r\n    async componentDidMount(){\r\n     this.setState({data:await fetchDailyData()})\r\n    }\r\n    render(){\r\n        console.log(this.state);\r\n        const pieData=this.props.data;\r\n        const LineChart=this.state.data.length? <Line data={{labels:this.state.data.map(({date})=>date),\r\n    datasets:[{data:this.state.data.map(({confirmed})=>confirmed),\r\n        label:'Infected',\r\n        backgroundColor:'blue',\r\n        fill:true\r\n    },\r\n        {data:this.state.data.map(({deaths})=>deaths),\r\n            label:'Dead',\r\n            backgroundColor:'red',\r\n            fill:true}]\r\n    }}\r\n        />:null;\r\n        const pieChart= this.props.country?<Pie data={{\r\n            labels:['Infected','Deaths','Recovered'],\r\n            datasets:[{label:'People',\r\n        backgroundColor:['blue','red','green'],\r\n        data:[pieData.confirmed.value,pieData.deaths.value,pieData.recovered.value]}]\r\n        }} options={{\r\n            legend:{display:true},\r\n            title:{display:true,text:`Current state in ${this.props.country}`}\r\n        }}/>:null;\r\n        return <div className={styles.chartDimension}>\r\n            {this.props.country? pieChart : LineChart}\r\n            </div>\r\n    }\r\n}\r\nexport default Chart;","import React, {Component} from 'react';\n//import logo from './logo.svg';\n//import styles from './App.css';\nimport {fetchDate} from './API/index';\nimport Cards from './Cards/Cards';\nimport Country from './Countries/Countries';\nimport Chart from './Charts/Charts';\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      data:{},\n      country:''\n    }\n  }\n  async componentDidMount(){\n    const data=await fetchDate();\n    console.log(data);\n    this.setState({data:data});\n  }\n  handleCountryChange=async(country)=>{\n    const data=await fetchDate(country);\n    console.log(data);\n    this.setState({data:data,\n    country:country});\n  }\n  render(){\n    console.log(this.state.data);\n    const card= this.state.data.confirmed ? <Cards data={this.state.data}/>:null;\n    return(\n      <div>{card}<br/>              \n      <Country changeCountry={this.handleCountryChange}/> <br/>\n      <Chart data={this.state.data} country={this.state.country}/>    \n      </div>\n      \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countryDropdown\":\"Countries_countryDropdown__3k-X8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chartDimension\":\"charts_chartDimension__35mLB\"};"],"sourceRoot":""}